"""
===========================
Movie Recommendation System
===========================

Overview
--------
This documentation outlines a Movie Recommendation System implemented in Python. The system employs a collaborative filtering approach,
calculating similarity scores between users based on their movie preferences. The recommendations are generated by identifying movies
liked by similar users and suggesting them to the target user.

Problem Description
-------------------
The primary goal of this Movie Recommendation System is to offer personalized movie recommendations based on the movie ratings provided
by users. The system utilizes the Euclidean distance metric to measure similarity between users. It takes into account a dataset of
user movie ratings, where each user's ratings for various movies are stored.

Input Variables
---------------
- `user_ratings_dataset`: A dictionary representing user movie ratings, where the keys are user full names and the
values are dictionaries containing movie ratings.

Usage
-----
To get movie recommendations, execute the script using the command:
python main.py
and type name and surname of user for which you want to get recommendations

Created by: Jakub Gola & Bartosz Laskowski

"""

import json
import numpy as np


def euclidean_score(dataset, user1, user2):
    """
    Calculates the Euclidean similarity score between two users based on their movie ratings in the dataset.

    Args:
        dataset (dict): The movie ratings dataset.
        user1 (str): The first user.
        user2 (str): The second user.

    Returns:
        float: The Euclidean similarity score between user1 and user2.
    """
    common_movies = set(dataset[user1]) & set(dataset[user2])

    if not common_movies:
        return 0

    squared_diff = [np.square(dataset[user1][item] - dataset[user2][item]) for item in common_movies]

    return 1 / (1 + np.sqrt(np.sum(squared_diff)))


def calculate_scores(dataset, target_user):
    """
    Calculates Euclidean similarity scores between the target user and all other users in the dataset.

    Args:
        dataset (dict): The movie ratings dataset.
        target_user (str): The target user for whom scores are calculated.

    Returns:
        list: A list of tuples containing user and their Euclidean similarity score, sorted in descending order.
    """
    if target_user not in dataset:
        raise TypeError(f"Nie można znaleźć użytkownika {target_user} w danych")

    scores = {user: euclidean_score(dataset, target_user, user) for user in dataset if user != target_user}
    return sorted(scores.items(), key=lambda x: x[1], reverse=True)


def get_recommendations(dataset, scores, target_user, num_recommendations=5):
    """
    Recommends movies to the target user based on Euclidean similarity scores.

    Args:
        dataset (dict): The movie ratings dataset.
        scores (list): A list of tuples containing user and their Euclidean similarity score.
        target_user (str): The target user for whom recommendations are generated.
        num_recommendations (int, optional): The number of movie recommendations. Default is 5.

    Returns:
        list: A list of recommended movies for the target user.
    """
    recommendations = []
    for neighbor, _ in scores:
        neighbor_movies = [item[0] for item in sorted(dataset[neighbor].items(), key=lambda item: item[1], reverse=True)]
        recommendations.extend(movie for movie in neighbor_movies if movie not in dataset[target_user])
        if len(recommendations) >= num_recommendations:
            return recommendations[:num_recommendations]


def get_anti_recommendations(dataset, scores, target_user, num_anti_recommendations=5):
    """
    Generates anti-recommendations (movies to avoid) for the target user based on Euclidean similarity scores.

    Args:
        dataset (dict): The movie ratings dataset.
        scores (list): A list of tuples containing user and their Euclidean similarity score.
        target_user (str): The target user for whom anti-recommendations are generated.
        num_anti_recommendations (int, optional): The number of anti-recommended movies. Default is 5.

    Returns:
        list: A list of anti-recommended movies for the target user.
    """
    anti_recommendations = []
    for neighbor, _ in scores:
        neighbor_movies = [item[0] for item in sorted(dataset[neighbor].items(), key=lambda item: item[1])]
        anti_recommendations.extend(movie for movie in neighbor_movies if movie not in dataset[target_user])
        if len(anti_recommendations) >= num_anti_recommendations:
            return anti_recommendations[:num_anti_recommendations]


if __name__ == '__main__':
    target_user = input("Podaj użytkownika dla którego mają pojawić się rekomendacje: ")

    ratings_file = './filmy.json'

    with open(ratings_file, 'r', encoding='utf-8') as f:
        data = json.loads(f.read())

    scores = calculate_scores(data, target_user)

    print("Top 5 filmów do obejrzenia:")
    print(get_recommendations(data, scores, target_user))
    print("Top 5 filmów niepolecanych do oglądania:")
    print(get_anti_recommendations(data, scores, target_user))
